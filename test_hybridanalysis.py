import unittest
# import pytest

import hybridanalysis as ha

class TesthandleAPIResponse(unittest.TestCase):
    def test_handleAPIResponse_RateLimitError(self):
        statuscode = 204
        with self.assertRaises(ha.RateLimitError):
            ha.handleAPIResponse(statuscode)
    def test_handleAPIResponse_BadRequestError(self):
        statuscode = 400
        with self.assertRaises(ha.BadRequestError):
            ha.handleAPIResponse(statuscode)
    def test_handleAPIResponse_BadLevelError(self):
        statuscode = 403
        with self.assertRaises(ha.BadLevelError):
            ha.handleAPIResponse(statuscode)
    def test_handleAPIResponse_Success(self):
        statuscode = 200
        self.assertTrue(ha.handleAPIResponse(statuscode))
    def test_handleAPIResponse_UnhandledStatusCodeError(self):
        statuscode = -1
        with self.assertRaises(ha.UnhandledStatusCodeError):
            ha.handleAPIResponse(statuscode)

class TestisMD5(unittest.TestCase):
    def test_isMD5_success(self):
        test = '098f6bcd4621d373cade4e832627b4f6'
        self.assertTrue(ha.isMD5(test))

    def test_isMD5_fail(self):
        test = 'abcdefgh'
        self.assertFalse(ha.isMD5(test))

class TestisSHA1(unittest.TestCase):
    def test_isSHA1_success(self):
        test = 'A94A8FE5CCB19BA61C4C0873D391E987982FBBD3'
        self.assertTrue(ha.isSHA1(test))

    def test_isSHA1_fail(self):
        test = 'abcdefgh'
        self.assertFalse(ha.isSHA1(test))

class TestisSHA256(unittest.TestCase):
    def test_isSHA256_success(self):
        test = '9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08'
        self.assertTrue(ha.isSHA256(test))

    def test_isSHA256_fail(self):
        test = 'abcdefgh'
        self.assertFalse(ha.isSHA256(test))

class TesttoMB(unittest.TestCase):
    def test_toMB_good_1(self):
        test = 1024
        result = 1
        self.assertEquals(ha.toMB(test), result)

    def test_toMB_good_2(self):
        test = 3.5 * 1024
        result = 3.5
        self.assertEquals(ha.toMB(test), result)

    def test_toMB_bad_1(self):
        test = -1
        result = 0
        self.assertEquals(ha.toMB(test), result)

    def test_toMB_bad_2(self):
        test = ''
        result = 1
        self.assertEquals(ha.toMB(test), result)


