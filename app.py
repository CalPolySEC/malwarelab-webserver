from flask import Flask, Blueprint, abort, render_template, request, url_for, redirect, flash, session, g
from werkzeug.utils import secure_filename
from flask_socketio import SocketIO, emit
import os
from zipfile import ZipFile
import zlib
from datetime import datetime, timezone
import requests
import config
from virustotal import VirusTotal
import vt_api
from hybridanalysis import HybridAnalysis
import hybrid_api
import auth
from auth import login_required, admin_required
import duo_auth
import admin
from database import init_app

def create_app():
    app = Flask(__name__)
    app_dir = os.path.dirname(os.path.abspath(__file__))
    
    with app.app_context():
        app.config.from_object(config)

        if config.VT:
            vt = VirusTotal(api=config.VT['API'], isPro=config.VT['isPro'])
            config.VT['VT'] = vt
            app.config['VT'] = vt
        else:
            app.config['VT'] = None
        
        if config.HA:
            ha = HybridAnalysis(api=config.HA['API'], secret=config.HA['SECRET'])
            config.HA['HA'] = ha
            app.config['HA'] = ha
        else:
            app.config['HA'] = None

        g.duo = app.config['DUO']

        if os.path.isdir(app.config['UPLOAD_FOLDER']) is False:
            os.makedirs(app.config['UPLOAD_FOLDER'])

        if os.path.isdir(app.config['TRANSFER_FOLDER']) is False:
            os.makedirs(app.config['TRANSFER_FOLDER'])

        app.register_blueprint(auth.auth)
        app.register_blueprint(duo_auth.duo_auth)
        app.register_blueprint(admin.admin)
        app.register_blueprint(vt_api.vt)
        app.register_blueprint(hybrid_api.ha)

        is_debug = app.debug # currently broken
        init_app(app)

    return app

app = create_app()
socketio = SocketIO(app)

class SampleQueue:
    class _SampleNode:
        def __init__(self, name):
            self.filename = name
            now = datetime.now(timezone.utc).astimezone()

            self.time = now.time().strftime("%I:%M:%S %p")
            self.date = now.date().strftime("%b. %d")
            self.next = None

        def __repr__(self):
            return str(self.filename)

    def __init__(self):
        self.count = 0
        self.root = None

    def insert(self, filename):
        node = SampleQueue._SampleNode(filename)

        if self.root is None:
            self.root = node
        else:
            temp = self.root
            while temp.next is not None:
                temp = temp.next
            temp.next = node
        
        self.count += 1
        
    def remove(self, sample=None):
        temp = self.root
        if sample is None:
            if temp is not None:
                self.root = self.root.next
                self.count -= 1
                return temp
            else:
                return None
        else:
            print('HERE')
            while temp.next:
                prev = temp
                print(temp.filename)
                if temp.filename == sample:
                    print('FOUND IT!')
                    try:
                        os.remove(os.path.join(app.config['UPLOAD_FOLDER'], temp.filename))
                    except:
                        print('FAILED TO DELETE {}'.format(temp.filename))
                    prev.next = temp.next
                    break
                temp = temp.next
            self.count -= 1
            temp.next = None
            return temp
    
    def empty(self):
        for i in range(0, self.count):
            self.remove()
        
        return True

    def listing(self):
        samples = []
        if self.count > 0:
            temp = self.root
            while temp is not None:
                samples.append(temp)
                temp = temp.next
            return samples
        else:
            return None

    def isEmpty(self):
        return self.count == 0

    def __repr__(self):
        samples = self.listing()
        
        return str(samples)

samplequeue = SampleQueue()
available_malware_search = []
if app.config.get('VT', None) is not None:
    available_malware_search.append('VT')
if app.config.get('HA', None) is not None:
    available_malware_search.append('HA')

#### ROUTING ####

@app.route("/")
def index():
    global samplequeue
    global available_malware_search
    return render_template('index.html', samples=samplequeue.listing(), isDebug=app.debug, logged_in=session.get('logged_in', False), available_malware_search=available_malware_search)

@app.route("/upload", methods=['POST'])
@login_required
def upload():
    if 'sample' not in request.files:
        flash('No file part')
    else:
        file = request.files['sample']
        if file.filename == '':
            flash('No selected file')
        elif file:
            filename = secure_filename(file.filename)
            if allowed_file(filename):
                file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                global samplequeue
                samplequeue.insert(filename)
                flash("Uploaded '" + filename + "'")
            else:
                flash("Invalid file format!")
        else:
            flash("Failed to uploaded '" + filename + "'")

    return redirect(url_for('index'))

@app.route('/queue')
@login_required
def get_queue():
    current = getSampleQueue()

    if current is not None:
        flash(str(current))
    else:
        flash("No samples in the queue!")
    
    return redirect(url_for('index'))

@app.route('/queue/remove')
@login_required
def remove_queue():
    global samplequeue
    return samplequeue.remove()

@app.route('/queue/empty')
@login_required
def empty_queue():
    global samplequeue
    count = samplequeue.count
    if samplequeue.empty():
        res = "Queue successfully emptied of " + str(count) + " item"
        if count != 1:
            res += 's'
        res += '!'

        flash(res)
    else:
        flash('Queue is already empty!')

    return redirect(url_for('index'))

@app.route('/start_processing', methods=['POST'])
@login_required
def start_processing():
    flash("Beginning sample processing...")
    global samplequeue
    count = samplequeue.count
    flash("Emptying queue of samples")

    samplefile = os.path.join(app.config['TRANSFER_FOLDER'], app.config['SAMPLES_ZIP'])
    if os.path.isfile(samplefile):
        os.remove(samplefile)

    while not samplequeue.isEmpty():
        sample = samplequeue.remove()

        flash("Processing '" + sample.filename + "'...")
        if processSample(sample, samplefile) is True:
            flash("Complete!")
        else:
            flash("Failed!")
            flash("Trying again later, adding sample back into the queue!")
            samplequeue.insert(sample.filename)

    # TODO: encrypt zipfile with password 'infected'

    if samplequeue.isEmpty():
        res = "Queue successfully emptied of " + str(count) + " item"
        if count != 1:
            res += 's'
        res += '!'

        flash(res)

        flash("Finished sample processing!")
        flash("'" + samplefile + "' file has been successfully created!")

        flash("Automation for sending '" + samplefile + "' starting now!")
        # post 'infected.zip' to correct location here
        url = 'http://' + app.config['AUTOMATION_IP'] + '/vm/windows 7 test x64/upload'
        with open(samplefile, 'rb') as samplefd:
            files = {'file': (samplefile, samplefd)}
            res = requests.post(url, files=files)

        flash(str(res.json()))
    else:
        flash('Failed to empty Queue!', category='error')

    return redirect(url_for('index'))

#### AUTHENTICATION ROUTES ####

@app.route('/register')
def register():
    if session.get('logged_in', False) is True:
        return redirect(url_for('index'))
    else: 
        client_id = list()
        scopes = list()
        state = list()

        return render_template('register.html', client_id=client_id, scopes=scopes, state=state)

@app.route('/login')
def login():
    if session.get('logged_in', False) is True:
        return redirect(url_for('index'))
    else:
        return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    if session.get('logged_in', False) is True:
        session.pop('logged_in')
        if session.get('duo_logged_in', False) is True:
            session.pop('duo_logged_in')
        session['user'] = 'guest'
        flash('Successfully logged out!')
        return redirect(url_for('index'))

#### SOCKETIO ####

@socketio.on('connect')
def socketio_connect():
    print('Client connected!')

    session['connected_user'] = {}
    session['connected_user']['user'] = {'user': session.get('user', 'guest'), 'logged_in': session.get('logged_in', False), 'is_admin': session.get('is_admin', False), 'email': session.get('email', None)}
    if session.get('user', None) is None:
        session['user'] = 'guest'
    if session.get('user') == 'guest':
        session['name'] = 'Guest'
        session['logged_in'] = False
        session['is_admin'] = False
        session['email'] = None

    emit('enter', {'data': "Welcome, {}!".format(session['user'])})

@socketio.on('connection_info')
def socketio_connection_info(data):
    for key in data:
        session['connected_user'][key] = data[key]
    print('User with information \'{}\' has connected!'.format(session['connected_user']))

@socketio.on('samples-remove')
def socketio_samples_remove(data):
    print(data)
    global samplequeue
    sample = data.get('sample', None)
    if sample:
        result = samplequeue.remove(sample=sample)
        if result:
            emit('server', {'data': 'Successfully removed {} from the Queue!'.format(sample)})
        else:
            emit('server', {'data': 'Failed to remove {} from the Queue!'.format(sample)})

        emit('server', {'data': 'Current Queue: {}'.format(samplequeue)})

@socketio.on('vt-search')
@login_required
def socketio_vt_search(message):
    query = message['query']
    offset = message.get('offset')
    res = vt_api.searchVT(query, offset)

    results = {'results': []}
    
    if res.get('error'):
        result = {'name': "ERROR", 'hash': res['error']}
    else:
        print(res['data'])
        result = {'name': message['query'], 'hash': "1234abcd", "data": res['data']}
    
    results['results'].append(result)

    emit('vt-search-data', {'data': results})

@socketio.on('ha-search')
@login_required
def socketio_ha_search(message):
    query = message['query']
    offset = message.get('offset', 0)
    res = hybrid_api.searchHA(query, offset)

    results = {'results': []}
    
    if res.get('error'):
        result = {'name': "ERROR", 'hash': res['error']}
    else:
        print(res['data'])
        print(res['data']['count'])
        for idx in range(res['data']['count']):
            result = res['data']['result'][idx]
            results['results'].append(result)

    emit('ha-search-data', {'data': results, 'search_terms': res['data']['search_terms']})

@socketio.on('ha-download')
@login_required
def socketio_ha_download(data):
    hash = data['hash']

    ha = config.HA['HA']
    
    if os.path.isfile(os.path.join(app.config['UPLOAD_FOLDER'], hash)):
        emit('server', {'data': 'File with hash {} has already been downloaded!'.format(hash)})
        return

    res = ha.Overview.hash_sample(hash)
    filename = res.get('filename')

    data = zlib.decompress(res.get('file'), zlib.MAX_WBITS|32)
    with open(os.path.join(app.config['UPLOAD_FOLDER'], filename), 'wb') as file:
        file.write(data)

    global samplequeue
    samplequeue.insert(filename)
    flash("Downloaded '" + filename + "'")

    emit('server', {'data': 'Finished downloading \'{}\'!'.format(hash)})
    emit('reload')

############# UTILITY FUNCTIONS #############

def allowed_file(filename):
    return '.' in filename and app.config['ALLOW_ALL'] or filename[::-1].rsplit('.', 1)[0].lower() in app.config['ALLOWED_EXTENSIONS']

def processSample(sample, samplefile):
    secure_filename = sample.filename[::-1].replace('.', '_', 1)[::-1]
    os.rename(os.path.join(app.config['UPLOAD_FOLDER'], sample.filename), os.path.join(app.config['UPLOAD_FOLDER'], secure_filename))
    with ZipFile(samplefile, 'a') as zip:
        try:
            zip.write(os.path.join(app.config['UPLOAD_FOLDER'], secure_filename))
        except:
            return False
    
    os.remove(os.path.join(app.config['UPLOAD_FOLDER'], secure_filename))
    return True

def getSampleQueue():
    global samplequeue
    if samplequeue.count == 0:
        return None
    else:
        return str(samplequeue)

def getconfig():
    return app.config

#### ERROR HANDLING ####

@app.errorhandler(404)
@login_required
def page_not_found(error):
    return 'This page does not exist', 404

#### FLASK ####

@app.teardown_appcontext
def shutdown_session(exception=None):
    db = g.pop('db', None)
    if db is not None:
        db.close()

if __name__ == "__main__":
    socketio.run(app, debug=True)
